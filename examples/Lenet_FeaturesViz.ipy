#-----------------------------------------------------------------
# This is a features/layers visualization  utility for Lenet
#-----------------------------------------------------------------

# set up Python environment: numpy for numerical routines, and matplotlib for
# plotting
import numpy as np
import matplotlib.pyplot as plt
%matplotlib auto

# set display defaults
plt.rcParams['figure.figsize'] = (5, 5)          # small images
plt.rcParams['image.interpolation'] = 'nearest'  # don't interpolate: show square pixels
plt.rcParams['image.cmap'] = 'gray'  # use grayscale output rather than a (potentially misleading) color heatmap

# The caffe module needs to be on the Python path;
#  we'll add it here explicitly.
import sys
caffe_root = '../'  # this file should be run from {caffe_root}/examples (otherwise change this line)
sys.path.insert(0, caffe_root + 'python')

import caffe
# If you get "No module named _caffe", either you have not built pycaffe or you
# have the wrong path.

import os
if os.path.isfile(caffe_root + 'examples/dvia/dvia_lenet_iter_150.caffemodel'):
    print 'CaffeNet Lenet found.'
else:
    print 'Error: Please fix the model path!'

# This script runs in cpu mode
caffe.set_mode_cpu()

# Change the caffemodel accordingly
model_def = caffe_root + 'examples/dvia/dvia_lenet_test.prototxt'
model_weights = caffe_root + 'examples/dvia/dvia_lenet_iter_150.caffemodel'

net = caffe.Net(model_def,      # defines the structure of the model
                model_weights,  # contains the trained weights
                caffe.TEST)     # use test mode (e.g., don't perform dropout)


# create transformer for the input called 'data'
transformer = caffe.io.Transformer({'data': net.blobs['data'].data.shape})

transformer.set_transpose('data', (2,0,1))  # move image channels to outermost dimension
transformer.set_raw_scale('data', 255)      # rescale from [0, 1] to [0, 255]

net.blobs['data'].reshape(1,        # batch size
                          1,        # grayscale
                          28, 28)   # image size is 28x28

image = caffe.io.load_image((caffe_root + 'data/dvia/stairs_dn/stairs_dn_010.png'), color=False)
transformed_image = transformer.preprocess('data', image)

# Shiva: I am not able to get this working at all
#plt.imshow(image)
#plt.pause(1) # you can change this number according to your needs

# copy the image data into the memory allocated for the net
net.blobs['data'].data[...] = transformed_image

### perform classification
output = net.forward()

output_prob = output['prob'][0]  # the output probability vector for the first image in the batch

print 'predicted class is:', output_prob.argmax()

# Commented this out, but this can be used to see the net-forward timings.
#print '\nTiming the Net'
#%timeit net.forward()

# for each layer, show the output shape
print '\nPrinting the shape of each layer'
print '(output_channels, input_channels, filter_height, filter_width)'
for layer_name, blob in net.blobs.iteritems():
    print layer_name + '\t' + str(blob.data.shape)

# Note: The param shapes typically have the form (output_channels, input_channels, filter_height, filter_width)
# (for the weights) and the 1-dimensional shape (output_channels,) (for the biases).
for layer_name, param in net.params.iteritems():
    print layer_name + '\t' + str(param[0].data.shape), str(param[1].data.shape)

# Function vis_square
def vis_square(data):
    """Take an array of shape (n, height, width) or (n, height, width, 3)
      and visualize each (height, width) thing in a grid of size approx. sqrt(n) by sqrt(n)"""

    # normalize data for display
    data = (data - data.min()) / (data.max() - data.min())

    # force the number of filters to be square
    n = int(np.ceil(np.sqrt(data.shape[0])))
    padding = (((0, n ** 2 - data.shape[0]),
               (0, 1), (0, 1))                 # add some space between filters
               + ((0, 0),) * (data.ndim - 3))  # don't pad the last dimension (if there is one)
    data = np.pad(data, padding, mode='constant', constant_values=1)  # pad with ones (white)


    # tile the filters into an image
    data = data.reshape((n, n) + data.shape[1:]).transpose((0, 2, 1, 3) + tuple(range(4, data.ndim + 1)))
    data = data.reshape((n * data.shape[1], n * data.shape[3]) + data.shape[4:])
    
    plt.imshow(data); plt.axis('off')
    plt.pause(2)


# the parameters are a list of [weights, biases]
# Lets look at conv1
# Shiva: I am not able to get this working
#filters = net.params['conv1'][0].data
#vis_square(filters.transpose(0, 2, 3, 1))

# The first layer output, conv1 (rectified responses of the filters above, first
# 36 only)
feat = net.blobs['conv1'].data[0, :36]
vis_square(feat)

# The pooling layer, pool2
feat = net.blobs['pool2'].data[0]
vis_square(feat)

# The first fully connected layer, fc1
# We show the output values and the histogram of the positive values
feat = net.blobs['ip1'].data[0]
plt.subplot(2, 1, 1)
plt.plot(feat.flat)
plt.subplot(2, 1, 2)
_ = plt.hist(feat.flat[feat.flat > 0], bins=100)
plt.pause(2)

# The final probability output, prob
feat = net.blobs['ip2'].data[0]
plt.figure(figsize=(15, 3))
plt.plot(feat.flat)
plt.pause(2)


# The fun begins here - try sending your own image through the network
# download the image  and point the full path
#image = caffe.io.load_image('/home/shiva/Downloads/Old_double_doors.jpg', color=False)
image = caffe.io.load_image(caffe_root + 'data/dvia/stairs_up/stairs_up_011.png', color=False)
net.blobs['data'].data[...] = transformer.preprocess('data', image)

# perform classification
net.forward()

# obtain the output probabilities
output_prob = net.blobs['prob'].data[0]

# copy the image data into the memory allocated for the net
#plt.imshow(image)
#plt.pause(2)

output_prob = output['prob'][0]  # the output probability vector for the first image in the batch
print 'predicted class is:', output_prob.argmax()

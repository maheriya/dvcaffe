from pylab import *
%pylab qt4

BATCHSIZE = 50

# run scripts (if any) from caffe root
import sys
import os
scriptpath = os.path.dirname(os.path.realpath( __file__ ))
caffe_root  = os.path.sep.join(scriptpath.split(os.path.sep)[:-1])

sys.path.insert(0, '/usr/local/caffe/python')
import caffe
from caffe import layers as L, params as P

import pprint
pp = pprint.PrettyPrinter(indent=2)

def dviaNet(lmdb, batch_size):
    # our version of LeNet: a series of linear and simple nonlinear transformations
    n = caffe.NetSpec()
    n.data, n.label = L.Data(batch_size=batch_size, backend=P.Data.LMDB, source=lmdb,
                             transform_param=dict(scale=1./255), ntop=2)
    
    n.conv1 = L.Convolution(n.data, kernel_size=5, num_output=20, weight_filler=dict(type='xavier'))
    n.pool1 = L.Pooling(n.conv1, kernel_size=2, stride=2, pool=P.Pooling.MAX)
    n.conv2 = L.Convolution(n.pool1, kernel_size=5, num_output=50, weight_filler=dict(type='xavier'))
    n.pool2 = L.Pooling(n.conv2, kernel_size=2, stride=2, pool=P.Pooling.MAX)
    n.fc1 =   L.InnerProduct(n.pool2, num_output=500, weight_filler=dict(type='xavier'))
    n.relu1 = L.ReLU(n.fc1, in_place=True)
    n.score = L.InnerProduct(n.relu1, num_output=10, weight_filler=dict(type='xavier'))
    n.loss =  L.SoftmaxWithLoss(n.score, n.label)
    
    return n.to_proto()

def writeProto():
  with open('examples/dvia_mlc/dvia_auto_train.prototxt', 'w') as f:
      f.write(str(lenet('examples/dvia_mlc/dvia_train_lmdb', BATCHSIZE)))
      
  with open('examples/dvia_mlc/dvia_auto_test.prototxt', 'w') as f:
      f.write(str(lenet('examples/dvia_mlc/dvia_test_lmdb', BATCHSIZE)))

#writeProto()

## Set GPU mode
caffe.set_device(0)
caffe.set_mode_gpu()
#caffe.set_mode_cpu()

## Train
### load the solver and create train and test nets
#solver = None  # ignore this workaround for lmdb data (can't instantiate two solvers on the same data)
solver = caffe.SGDSolver('examples/dvia_mlc_old/dvia_solver.prototxt')
#solver = caffe.AdaDeltaSolver('examples/dvia_mlc_old/dvia_solver.prototxt')

# each output is (batch size, feature dim, spatial dim)
pp.pprint([(k, v.data.shape) for k, v in solver.net.blobs.items()])

# just print the weight sizes (we'll omit the biases)
pp.pprint([(k, v[0].data.shape) for k, v in solver.net.params.items()])

solver.net.forward()  # train net
solver.test_nets[0].forward()  # test net (there can be more than one)

# we use a little trick to tile the first eight images
figure()
ax = subplot2grid((2,6), (0,0), colspan=5)
imshow(solver.net.blobs['data'].data[:8, 0].transpose(1, 0, 2).reshape(64, 8*64), cmap='gray'); axis('off')
print 'train labels:', solver.net.blobs['label_class'].data[:8]

ax2 = subplot2grid((2,6), (1,0), colspan=5)
imshow(solver.test_nets[0].blobs['data'].data[:8, 0].transpose(1, 0, 2).reshape(64, 8*64), cmap='gray'); axis('off')
print 'test labels:', solver.test_nets[0].blobs['label_class'].data[:8]

solver.step(1)

ax3 = subplot2grid((2,6), (0,5), rowspan=2)
imshow(solver.net.params['conv1'][0].diff[:, 0].reshape(4, 5, 5, 5)
       .transpose(0, 2, 1, 3).reshape(4*5, 5*5), cmap='gray'); axis('off')
show()

##%time
niter = 1000
test_interval = 200
# losses will also be stored in the log
train_loss   = zeros(niter)
train_loss_x = zeros(niter)
test_loss    = zeros(niter)
test_loss_x  = zeros(niter)
test_acc     = zeros(int(np.ceil(niter / test_interval)))
test_acc_x   = zeros(int(np.ceil(niter / test_interval)))
output       = zeros((niter, 8, 4))
output_x     = zeros((niter, 8, 1))

# the main solver loop
for it in range(niter):
    solver.step(1)  # SGD by Caffe
    
    # store the train loss for classification
    train_loss[it] = solver.net.blobs['loss'].data
    test_loss[it]  = solver.test_nets[0].blobs['loss'].data
    train_loss_x[it] = solver.net.blobs['loss_npX'].data
    test_loss_x[it]  = solver.test_nets[0].blobs['loss_npX'].data
    
    # store the output on the first test batch
    # (start the forward pass at conv1 to avoid loading new data)
    solver.test_nets[0].forward(start='conv1')
    output[it] = solver.test_nets[0].blobs['fc_class'].data[:8]
    output_x[it] = solver.test_nets[0].blobs['fc_npX'].data[:8]
    
    # run a full test every so often
    # (Caffe can also do this for us and write to a log, but we show here
    #  how to do it directly in Python, where more complicated things are easier.)
    if it % test_interval == 0:
        print 'Iteration', it, 'testing...'
        correct = 0
        diffx   = 0
        for test_it in range(100):
            solver.test_nets[0].forward()
            lcorrect = (solver.test_nets[0].blobs['fc_class'].data.argmax(1).reshape(BATCHSIZE)
                        == solver.test_nets[0].blobs['label_class'].data.reshape(BATCHSIZE))
            correct += sum(lcorrect)
            diffx   += average(abs(solver.test_nets[0].blobs['fc_npX'].data - solver.test_nets[0].blobs['label_npX'].data))
        test_acc[it // test_interval] = correct / BATCHSIZE  ## Get the number in percentage
        test_acc_x[it // test_interval] = 100 - (diffx/100)
        print "\ttest_acc       = ", test_acc[it // test_interval]
        print "\ttest_acc_x     = ", test_acc_x[it // test_interval]

##-##########################################################################
## Training is done. Following is all post-processing and visualization
##
test_data = solver.test_nets[0].blobs['data'].data
def dumpVars():
    import pickle
    pfile = open("dvia_plotvars.pkl", "wb")
    plotvars = {}
    plotvars['niter'] = niter
    plotvars['test_interval'] = test_interval
    plotvars['train_loss'] = train_loss
    plotvars['train_loss_x'] = train_loss_x
    plotvars['test_loss'] = test_loss
    plotvars['test_loss_x'] = test_loss_x
    plotvars['test_acc'] = test_acc
    plotvars['test_acc_x'] = test_acc_x
    plotvars['output'] = output
    plotvars['output_x'] = output_x
    plotvars['test_data'] = test_data
    pickle.dump(plotvars, pfile)
    pfile.close()

## Dump all the vars that we need for plots offline (after this script is done)
dumpVars() 

def plotTrainAcc():
    _, ax1 = subplots()
    ax2 = ax1.twinx()
    ax1.plot(arange(niter), train_loss)
    ax2.plot(test_interval * arange(len(test_acc)), test_acc, 'r')
    ax1.set_xlabel('iteration')
    ax1.set_ylabel('train loss')
    ax2.set_ylabel('test accuracy')
    ax2.set_title('Test Accuracy: {:.2f}'.format(test_acc[-1]))

def plotTrainAccNpX():
    _, ax1 = subplots()
    ax2 = ax1.twinx()
    ax1.plot(arange(niter), train_loss_x)
    ax2.plot(test_interval * arange(len(test_acc_x)), test_acc_x, 'r')
    ax1.set_xlabel('iteration')
    ax1.set_ylabel('train loss')
    ax2.set_ylabel('test accuracy')
    ax2.set_title('Test Accuracy NpX: {:.2f}'.format(test_acc_x[-1]))

def plotLoss():
    _, ax1 = subplots()
    ax2 = ax1.twinx()
    ax1.plot(arange(niter), train_loss)
    ax2.plot(arange(niter), test_loss, 'r')
    ax1.set_xlabel('iteration')
    ax1.set_ylabel('train loss')
    ax2.set_ylabel('test loss')
    ax2.set_title('Train/Test Loss')

def plotLossNpX():
    _, ax1 = subplots()
    ax2 = ax1.twinx()
    ax1.plot(arange(niter), train_loss_x)
    ax2.plot(arange(niter), test_loss_x, 'r')
    ax1.set_xlabel('iteration')
    ax1.set_ylabel('train loss')
    ax2.set_ylabel('test loss')
    ax2.set_title('Train/Test Loss NpX')

plotTrainAcc()
plotTrainAccNpX()
plotLoss()
plotLossNpX()

# Since we saved the results on the first test batch, we can watch how our prediction scores
# evolved. We'll plot time on the x axis and each possible label on the y, with
# lightness indicating confidence. These are raw scores
#--for i in range(8):
#--    figure(figsize=(2, 2))
#--    imshow(test_data[i, 0], cmap='gray')
#--    figure(figsize=(10, 2))
#--    imshow(output[:50, i].T, interpolation='nearest', cmap='gray')
#--    xlabel('iteration')
#--    ylabel('label')

# Same as above, except that these are softmax probabilities:
figure()
for i in range(8):
    axl = subplot2grid((8,2), (i,0))
    axl.axes.get_xaxis().set_ticks([])
    axl.axes.get_yaxis().set_ticks([])
    imshow(test_data[i, 0], cmap='gray')
    axr = subplot2grid((8,2), (i,1))
    width = 0.1
    axr.set_yticks(np.arange(4) + width/2)
    #axr.set_yticklabels(['neg', 'stair', 'curb', 'door'], rotation=0)
    #xlabel('iteration')
    #ylabel('class')
    imshow(exp(output[:50, i].T) / exp(output[:50, i].T).sum(0), interpolation='nearest', cmap='gray')

figure()
for i in range(8):
    axl = subplot2grid((8,2), (i,0))
    axl.axes.get_xaxis().set_ticks([])
    axl.axes.get_yaxis().set_ticks([])
    imshow(test_data[i, 0], cmap='gray')
    axr = subplot2grid((8,2), (i,1))
    width = 0.1
    axr.set_yticks(np.arange(1) + width/2)
    #axr.set_yticklabels(['neg', 'stair', 'curb', 'door'], rotation=0)
    #xlabel('iteration')
    #ylabel('class')
    imshow(exp(output_x[:50, i].T), interpolation='nearest', cmap='gray')



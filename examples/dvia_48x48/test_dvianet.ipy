from pylab import *
%pylab qt4

import os
import sys

sys.path.insert(0, '/usr/local/caffe/python')
import caffe
import pprint
pp = pprint.PrettyPrinter(indent=2)


HOME             = os.environ['HOME']
IMAGES_DIR       = os.path.join(HOME, "Projects/IMAGES/test_dvia")
PRETRAINED_MODEL = "cnn_pretrained_dvia_87.caffemodel"
MODEL_DEF        = "dvia_deploy.prototxt"

result           = "dvia_result"

#caffe.set_device(0)
#caffe.set_mode_gpu()
caffe.set_mode_cpu()


# Load pretrained network
print "Loading pre-trained network {}".format(PRETRAINED_MODEL)
net = caffe.Net(MODEL_DEF, PRETRAINED_MODEL, caffe.TEST)
print 'net.inputs ', net.inputs

# each output is (batch size, feature dim, spatial dim)
print "Net's blobs:"
pp.pprint([(k, v.data.shape) for k, v in net.blobs.items()])

# just print the weight sizes (we'll omit the biases)
print "Net's params:"
pp.pprint([(k, v[0].data.shape) for k, v in net.params.items()])

classes = ['catchall', 'stair', 'curb', 'door']
images = ['catchall1.png',  'catchall2.png', 'catchall3.png', 'curb1.png', 'doorframe1.png', 'doorframe2.png', 'stair1.png', 'stair2.png', 'stair3.png']
labels = ['catchall',  'catchall', 'catchall', 'curb', 'doorframe', 'doorframe', 'stair', 'stair', 'stair']

index = 0
#for imgname in images:
if 1:
    #imgfile = os.path.join(IMAGES_DIR, "scaled_32x32_RGB", imgname)
    imgfile = os.path.join(IMAGES_DIR, "scaled_32x32_RGB", "stair1b.png")
    img     = caffe.io.load_image(imgfile, False)
    net.blobs['data'].data[...] = img.transpose(2, 0, 1)
    forward_result = net.forward()
    argmax = net.blobs['fc_class'].data.argmax(1)[0]
    print "Class: {c} (prob {p}) [expected {e}]".format(c=classes[argmax], p=forward_result['prob'][0][argmax], e=labels[index])
    #print "NpX: {}".format(forward_result['fc_npX'][0][0]*32)
    #print "NpY: {}".format(forward_result['fc_npY'][0][0]*32)
    img_c = caffe.io.load_image(imgfile, True)
    imshow(img_c)
    a = raw_input('\nNext?')
    index += 1
